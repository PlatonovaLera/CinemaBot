import telebot
from telebot import types
import csv
import random
import rapidfuzz

line_count = sum(1 for line in open(r'C:\Users\–î–∞—à–∞\Desktop\2 –∫—É—Ä—Å\pythonProject\films –±–¥.csv', encoding='cp1251')) - 1

def rand_film_name():
    rand_num_of_film = random.randint(1, line_count)
    with open(r'C:\Users\–î–∞—à–∞\Desktop\2 –∫—É—Ä—Å\pythonProject\films –±–¥.csv', newline='', encoding='cp1251') as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        next(reader)
        for _ in range(rand_num_of_film):
            row = next(reader)
        return row[1]

bot = telebot.TeleBot('6969036206:AAFrWpg8FYYCxUr8rTtOq_YmzajlM4n6WJU')

selected_filters = {}

def on_click_show_films(message):
    films = get_filtered_films(selected_filters)
    if films:
        bot.send_message(message.chat.id, "–í–æ—Ç —Ñ–∏–ª—å–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:")
        show_next_films(message, films, 0)
    else:
        bot.send_message(message.chat.id, "–§–∏–ª—å–º–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        hide_keyboard = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!", reply_markup=hide_keyboard)
    selected_filters.clear()

def show_next_films(message, films, start_index):
    end_index = start_index + 5
    films_to_show = films[start_index:end_index]
    numbered_films = [f"{i + 1}. {film}" for i, film in enumerate(films_to_show, start=start_index)]
    bot.send_message(message.chat.id, "\n".join(numbered_films))
    if end_index < len(films):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_more = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ')
        btn_done = types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å')
        markup.row(btn_more, btn_done)
        bot.send_message(message.chat.id, "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ —Ñ–∏–ª—å–º—ã?", reply_markup=markup)
        bot.register_next_step_handler(message, lambda msg: on_more_films(msg, films, end_index))
    else:
        hide_keyboard = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!", reply_markup=hide_keyboard)

def on_more_films(message, films, current_index):
    if message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ':
        show_next_films(message, films, current_index)
    else:
        hide_keyboard = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!", reply_markup=hide_keyboard)

def get_filtered_films(filters):
    films = []
    with open(r'C:\Users\–î–∞—à–∞\Desktop\2 –∫—É—Ä—Å\pythonProject\films –±–¥.csv', newline='', encoding='cp1251') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=';')
        for row in reader:
            if matches_filters(row, filters):
                films.append(row['film_name'])
    return films

def film_country(country):
    country_id = None
    with open(r'C:\Users\–î–∞—à–∞\Desktop\2 –∫—É—Ä—Å\pythonProject\films_country –±–¥.csv', newline='', encoding='cp1251') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=';')
        for row in reader:
            if row['country_name'] == country:
                country_id = int(row['id'])
                break
    return country_id

def film_age_limit(age_limit):
    age_limit_id = None
    with open(r'C:\Users\–î–∞—à–∞\Desktop\2 –∫—É—Ä—Å\pythonProject\age_limit –±–¥.csv', newline='', encoding='cp1251') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=';')
        for row in reader:
            if row['limit'] == age_limit:
                age_limit_id = int(row['id'])
                break
    return age_limit_id

def film_director(director):
    if director is None:
        return None
    director = director.strip().lower()
    director_id = None
    max_ratio = 0
    best_match = None
    with open(r'C:\Users\–î–∞—à–∞\Desktop\2 –∫—É—Ä—Å\pythonProject\director –±–¥.csv', newline='', encoding='cp1251') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=';')
        for row in reader:
            if row['director_surname']:
                surname = row['director_surname'].strip().lower()
                ratio = rapidfuzz.fuzz.ratio(surname, director)
                if ratio > max_ratio:
                    max_ratio = ratio
                    best_match = row
    if max_ratio > 80:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
        director_id = int(best_match['id'])
    return director_id

def film_actor(actor):
    if actor is None:
        return []
    actor = actor.strip().lower()
    actor_id = None
    max_ratio = 0
    best_match = None
    with open(r'C:\Users\–î–∞—à–∞\Desktop\2 –∫—É—Ä—Å\pythonProject\actors –±–¥.csv', newline='', encoding='cp1251') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=';')
        for row in reader:
            if row['actor_surname']:
                surname = row['actor_surname'].strip().lower()
                ratio = rapidfuzz.fuzz.ratio(surname, actor)
                if ratio > max_ratio:
                    max_ratio = ratio
                    best_match = row

    if max_ratio > 80:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
        actor_id = int(best_match['id'])
    film_ids = []
    if actor_id is not None:
        with open(r'C:\Users\–î–∞—à–∞\Desktop\2 –∫—É—Ä—Å\pythonProject\cast_films –±–¥.csv', newline='', encoding='cp1251') as cast_file:
            cast_reader = csv.DictReader(cast_file, delimiter=';')
            for cast_row in cast_reader:
                if int(cast_row['id_actor']) == actor_id:
                    film_ids.append(int(cast_row['id_film']))
    return film_ids

def film_genre(genre):
    genre_id = None
    film_id = []
    with open(r'C:\Users\–î–∞—à–∞\Desktop\2 –∫—É—Ä—Å\pythonProject\genre –±–¥.csv', newline='', encoding='cp1251') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=';')
        for row in reader:
            if row['genre_name'] == genre:
                genre_id = int(row['id'])
                break
    if genre_id is not None:
        with open(r'C:\Users\–î–∞—à–∞\Desktop\2 –∫—É—Ä—Å\pythonProject\genre_films –±–¥.csv', newline='', encoding='cp1251') as genre_file:
            genre_reader = csv.DictReader(genre_file, delimiter=';')
            for genre_row in genre_reader:
                if int(genre_row['id_genre']) == genre_id:
                    film_id.append(int(genre_row['id_film']))
    return film_id

def matches_filters(row, filters):
    for filter_type, value in filters.items():
        if filter_type == '–ì–æ–¥':
            year = int(row['film_year'])
            if not (value[0] <= year <= value[1]):
                return False
        elif filter_type == '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å':
            duration = int(row['duration'])
            if not (value[0] <= duration <= value[1]):
                return False
        elif filter_type == '–†–µ–π—Ç–∏–Ω–≥':
            rating = row['rating']
            if len(rating) == 3:
                rating = int(row['rating'][0]) + int(row['rating'][2]) / 10
            else:
                rating = int(row['rating'])
            if not (value[0] <= rating <= value[1]):
                return False
        elif filter_type == '–°—Ç—Ä–∞–Ω–∞':
            country_id = film_country(value)
            if not (int(row['id_country']) == country_id):
                return False
        elif filter_type == '–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ':
            age_limit_id = film_age_limit(value)
            if not (int(row['id_age_limit']) == age_limit_id):
                return False
        elif filter_type == '–†–µ–∂–∏—Å—Å–µ—Ä':
            director_id = film_director(value)
            if not (int(row['id_director']) == director_id):
                return False
        elif filter_type == '–ê–∫—Ç–µ—Ä—ã':
            actor_film_ids = film_actor(value)
            if int(row['id']) not in actor_film_ids:
                return False
        elif filter_type == '–ñ–∞–Ω—Ä':
            genre_film_ids = film_genre(value)
            if int(row['id']) not in genre_film_ids:
                return False
    return True


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤')
    btn2 = types.KeyboardButton('–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º')
    btn3 = types.KeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')
    markup.row(btn1, btn2)
    markup.row(btn3)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å üëáüèª', reply_markup=markup)
    bot.register_next_step_handler(message, on_click)

def on_click(message):
    if message.text == '–ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤':
        filter_choice(message)
    elif message.text == '–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º':
        random_film = rand_film_name()
        bot.send_message(message.chat.id, f"–í–æ—Ç –≤–∞—à —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º: {random_film}")
        hide_keyboard = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!", reply_markup=hide_keyboard)
    elif message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤')
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.')
        start(message)

def filter_choice(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ì–æ–¥')
    btn2 = types.KeyboardButton('–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ')
    btn3 = types.KeyboardButton('–ñ–∞–Ω—Ä')
    btn4 = types.KeyboardButton('–†–µ–∂–∏—Å—Å–µ—Ä')
    btn5 = types.KeyboardButton('–°—Ç—Ä–∞–Ω–∞')
    btn6 = types.KeyboardButton('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
    btn7 = types.KeyboardButton('–†–µ–π—Ç–∏–Ω–≥')
    btn8 = types.KeyboardButton('–ê–∫—Ç–µ—Ä—ã')
    btn_done = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º—ã')
    btn_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.row(btn1, btn2, btn3)
    markup.row(btn4, btn5, btn6)
    markup.row(btn7, btn8, btn_back)
    markup.row(btn_done)
    if selected_filters:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º—ã".', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–∂–µ–Ω –≤–∞–º –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª—å–º–∞ üëáüèª', reply_markup=markup)
    bot.register_next_step_handler(message, on_click_filter)

def on_click_filter(message):
    if message.text == '–ù–∞–∑–∞–¥':
        selected_filters.popitem()  # –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        filter_choice(message)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–∞
        return
    filter_type = message.text
    if filter_type not in selected_filters:
        selected_filters[filter_type] = None
    if message.text == '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º—ã':
        on_click_show_films(message)
        return
    if message.text == '–ì–æ–¥':
        markup_inline = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–¥–æ 1950', callback_data='year_1')
        btn2 = types.InlineKeyboardButton('1950 - 1969', callback_data='year_2')
        btn3 = types.InlineKeyboardButton('1970 - 1979', callback_data='year_3')
        btn4 = types.InlineKeyboardButton('1980 - 1989', callback_data='year_4')
        btn5 = types.InlineKeyboardButton('1990 - 1999', callback_data='year_5')
        btn6 = types.InlineKeyboardButton('2000 - 2004', callback_data='year_6')
        btn7 = types.InlineKeyboardButton('2005 - 2009', callback_data='year_7')
        btn8 = types.InlineKeyboardButton('2010 - 2014', callback_data='year_8')
        btn9 = types.InlineKeyboardButton('2015 - 2019', callback_data='year_9')
        btn10 = types.InlineKeyboardButton('2020 - 2024', callback_data='year_10')
        markup_inline.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9, btn10)
        bot.send_message(message.chat.id, '–ö–∞–∫–æ–≥–æ –≥–æ–¥–∞ —Ñ–∏–ª—å–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=markup_inline)
    elif message.text == '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å':
        markup_inline = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–º–µ–Ω—å—à–µ 1—á', callback_data='duration_1')
        btn2 = types.InlineKeyboardButton('–æ—Ç 1—á –¥–æ 1.5—á', callback_data='duration_2')
        btn3 = types.InlineKeyboardButton('–æ—Ç 1.5—á –¥–æ 2—á', callback_data='duration_3')
        btn4 = types.InlineKeyboardButton('–±–æ–ª—å—à–µ 2—á', callback_data='duration_4')
        markup_inline.add(btn1, btn2, btn3, btn4)
        bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=markup_inline)
    elif message.text == '–°—Ç—Ä–∞–Ω–∞':
        markup_inline = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–†–æ—Å—Å–∏—è', callback_data='country_–†–æ—Å—Å–∏—è')
        btn2 = types.InlineKeyboardButton('–°–®–ê', callback_data='country_–°–®–ê')
        btn3 = types.InlineKeyboardButton('–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', callback_data='country_–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è')
        btn4 = types.InlineKeyboardButton('–°–°–°–†', callback_data='country_–°–°–°–†')
        btn5 = types.InlineKeyboardButton('–§—Ä–∞–Ω—Ü–∏—è', callback_data='country_–§—Ä–∞–Ω—Ü–∏—è')
        btn6 = types.InlineKeyboardButton('–ì–µ—Ä–º–∞–Ω–∏—è', callback_data='country_–ì–µ—Ä–º–∞–Ω–∏—è')
        btn7 = types.InlineKeyboardButton('–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è', callback_data='country_–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è')
        btn8 = types.InlineKeyboardButton('–î–∞–Ω–∏—è', callback_data='country_–î–∞–Ω–∏—è')
        btn9 = types.InlineKeyboardButton('–ò—Å–ø–∞–Ω–∏—è', callback_data='country_–ò—Å–ø–∞–Ω–∏—è')
        markup_inline.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9)
        bot.send_message(message.chat.id, '–ö–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã —Ñ–∏–ª—å–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=markup_inline)
    elif message.text == '–†–µ–∂–∏—Å—Å–µ—Ä':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é —Ä–µ–∂–∏—Å—Å–µ—Ä–∞, —Ñ–∏–ª—å–º –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–µ–ª(-–∞) –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')
        bot.register_next_step_handler(message, on_click_director)
    elif message.text == '–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ':
        markup_inline = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('0+', callback_data='limit_0+')
        btn2 = types.InlineKeyboardButton('6+', callback_data='limit_6+')
        btn3 = types.InlineKeyboardButton('12+', callback_data='limit_12+')
        btn4 = types.InlineKeyboardButton('16+', callback_data='limit_16+')
        btn5 = types.InlineKeyboardButton('18+', callback_data='limit_18+')
        markup_inline.add(btn1, btn2, btn3, btn4, btn5)
        bot.send_message(message.chat.id, '–§–∏–ª—å–º —Å –∫–∞–∫–∏–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=markup_inline)
    elif message.text == '–†–µ–π—Ç–∏–Ω–≥':
        markup_inline = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–Ω–∏–∂–µ 3.0', callback_data='rating_1')
        btn2 = types.InlineKeyboardButton('3.0 - 4.9', callback_data='rating_2')
        btn3 = types.InlineKeyboardButton('5.0 - 6.9', callback_data='rating_3')
        btn4 = types.InlineKeyboardButton('7.0 - 7.9', callback_data='rating_4')
        btn5 = types.InlineKeyboardButton('8.0 - 8.9', callback_data='rating_5')
        btn6 = types.InlineKeyboardButton('9.0 - 10.0', callback_data='rating_6')
        markup_inline.add(btn1, btn2, btn3, btn4, btn5, btn6)
        bot.reply_to(message, '–ö–∞–∫–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É —Ñ–∏–ª—å–º–∞?', reply_markup=markup_inline)
    elif message.text == '–ê–∫—Ç–µ—Ä—ã':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –∞–∫—Ç–µ—Ä–∞, —Ñ–∏–ª—å–º —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–µ–ª(-–∞) –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')
        bot.register_next_step_handler(message, on_click_actor)
    elif message.text == '–ñ–∞–Ω—Ä':
        markup_inline = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–ê–Ω–∏–º–µ', callback_data='genre_–ê–Ω–∏–º–µ')
        btn2 = types.InlineKeyboardButton('–ë–∏–æ–≥—Ä–∞—Ñ–∏—è', callback_data='genre_–ë–∏–æ–≥—Ä–∞—Ñ–∏—è')
        btn3 = types.InlineKeyboardButton('–ë–æ–µ–≤–∏–∫', callback_data='genre_–ë–æ–µ–≤–∏–∫')
        btn4 = types.InlineKeyboardButton('–í–µ—Å—Ç–µ—Ä–Ω', callback_data='genre_–í–µ—Å—Ç–µ—Ä–Ω')
        btn5 = types.InlineKeyboardButton('–í–æ–µ–Ω–Ω—ã–π', callback_data='genre_–í–æ–µ–Ω–Ω—ã–π')
        btn6 = types.InlineKeyboardButton('–î–µ—Ç–µ–∫—Ç–∏–≤', callback_data='genre_–î–µ—Ç–µ–∫—Ç–∏–≤')
        btn7 = types.InlineKeyboardButton('–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π', callback_data='genre_–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π')
        btn8 = types.InlineKeyboardButton('–î—Ä–∞–º–∞', callback_data='genre_–î—Ä–∞–º–∞')
        btn9 = types.InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', callback_data='genre_–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π')
        btn10 = types.InlineKeyboardButton('–ö–æ–º–µ–¥–∏—è', callback_data='genre_–ö–æ–º–µ–¥–∏—è')
        btn11 = types.InlineKeyboardButton('–ö–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞', callback_data='genre_–ö–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞')
        btn12 = types.InlineKeyboardButton('–ö—Ä–∏–º–∏–Ω–∞–ª', callback_data='genre_–ö—Ä–∏–º–∏–Ω–∞–ª')
        btn13 = types.InlineKeyboardButton('–ú–µ–ª–æ–¥—Ä–∞–º–∞', callback_data='genre_–ú–µ–ª–æ–¥—Ä–∞–º–∞')
        btn14 = types.InlineKeyboardButton('–ú—É–∑—ã–∫–∞', callback_data='genre_–ú—É–∑—ã–∫–∞')
        btn15 = types.InlineKeyboardButton('–ú—É–ª—å—Ç—Ñ–∏–ª—å–º', callback_data='genre_–ú—É–ª—å—Ç—Ñ–∏–ª—å–º')
        btn16 = types.InlineKeyboardButton('–ú—é–∑–∏–∫–ª', callback_data='genre_–ú—é–∑–∏–∫–ª')
        btn17 = types.InlineKeyboardButton('–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', callback_data='genre_–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è')
        btn18 = types.InlineKeyboardButton('–°–µ–º–µ–π–Ω—ã–π', callback_data='genre_–°–µ–º–µ–π–Ω—ã–π')
        btn19 = types.InlineKeyboardButton('–°–ø–æ—Ä—Ç', callback_data='genre_–°–ø–æ—Ä—Ç')
        btn20 = types.InlineKeyboardButton('–¢—Ä–∏–ª–ª–µ—Ä', callback_data='genre_–¢—Ä–∏–ª–ª–µ—Ä')
        btn21 = types.InlineKeyboardButton('–£–∂–∞—Å—ã', callback_data='genre_–£–∂–∞—Å—ã')
        btn22 = types.InlineKeyboardButton('–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', callback_data='genre_–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞')
        btn23 = types.InlineKeyboardButton('–ù—É–∞—Ä', callback_data='genre_–ù—É–∞—Ä')
        btn24 = types.InlineKeyboardButton('–§—ç–Ω—Ç–µ–∑–∏', callback_data='genre_–§—ç–Ω—Ç–µ–∑–∏')
        btn25 = types.InlineKeyboardButton('–ú–∏—Å—Ç–∏–∫–∞', callback_data='genre_–ú–∏—Å—Ç–∏–∫–∞')
        markup_inline.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9, btn10, btn11, btn12, btn13, btn14, btn15, btn16, btn17, btn18, btn19, btn20, btn21, btn22, btn23, btn24, btn25)
        bot.reply_to(message, '–§–∏–ª—å–º –∫–∞–∫–æ–≥–æ –∂–∞–Ω—Ä–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=markup_inline)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤.')
        filter_choice(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('year_'))
def on_click_year(call):
    year_ranges = {
        'year_1': (0, 1949),
        'year_2': (1950, 1969),
        'year_3': (1970, 1979),
        'year_4': (1980, 1989),
        'year_5': (1990, 1999),
        'year_6': (2000, 2004),
        'year_7': (2005, 2009),
        'year_8': (2010, 2014),
        'year_9': (2015, 2019),
        'year_10': (2020, 2024),
    }
    year1, year2 = year_ranges[call.data]
    selected_filters['–ì–æ–¥'] = (year1, year2)
    filter_choice(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('duration_'))
def on_click_duration(call):
    duration_ranges = {
        'duration_1': (0, 59),
        'duration_2': (60, 89),
        'duration_3': (90, 119),
        'duration_4': (120, 500),
    }
    dur1, dur2 = duration_ranges[call.data]
    selected_filters['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'] = (dur1, dur2)
    filter_choice(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('rating_'))
def on_click_rating(call):
    rating_ranges = {
        'rating_1': (0, 2.9),
        'rating_2': (3.0, 4.9),
        'rating_3': (5.0, 6.9),
        'rating_4': (7.0, 7.9),
        'rating_5': (8.0, 8.9),
        'rating_6': (9.0, 10.0),
    }
    rating1, rating2 = rating_ranges[call.data]
    selected_filters['–†–µ–π—Ç–∏–Ω–≥'] = (rating1, rating2)
    filter_choice(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('country_'))
def on_click_country(call):
    country = call.data.split('_')[1]
    selected_filters['–°—Ç—Ä–∞–Ω–∞'] = country
    filter_choice(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('limit_'))
def on_click_age_limit(call):
    age_limit = call.data.split('_')[1]
    selected_filters['–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ'] = age_limit
    filter_choice(call.message)

def on_click_director(message):
    director = message.text
    selected_filters['–†–µ–∂–∏—Å—Å–µ—Ä'] = director
    filter_choice(message)

def on_click_actor(message):
    actor = message.text
    selected_filters['–ê–∫—Ç–µ—Ä—ã'] = actor
    filter_choice(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('genre_'))
def on_click_genre(call):
    genre = call.data.split('_')[1]
    selected_filters['–ñ–∞–Ω—Ä'] = genre
    filter_choice(call.message)

bot.polling(none_stop=True)
